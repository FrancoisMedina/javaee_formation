design pattern
------------------
c'est un "motif", ou organisation du code/classe souvent
rencontré pour répondre à des problématiques courante
	-> en connaitre quelques un évitera de réinventer la roue
	(en moins bien)
	-> c'est aussi une bonne source d'inspiration
il en existe une infinité, mais quelques uns se rencontre partout
certains sont même directement "intégré" au langage modernes


A) design pattern singleton
on veut une classe qui n'ai qu'une seule instance en existence
il n'y a qu'un seul "représentant" de notre objet, et a chaquefois
que l'on veut obtenir une instance de cet objet, c'est le même
exemplaire qui nous est renvoyé
	exemple classique, une classe Configuration, qui contient
	tous les parametres de notre application, accessible partout
	dans notre application
		-> on ne veut pas plusieurs exemplaire, potentiellement
		différent de notre configuration unique
			pattern singleton
			
	1- le constructeur de notre objet va être passé en private
	2- stocker l'instance unique de l'objet dans une propriété
	statique de notre classe (private)
	3- fournir une méthode statique permettant au "reste de l'application"
	de récupérer l'instance de l'objet
	
	
B) immutable
l'état de l'objet ne peut être modifié après sa création. toutes fonctions
impliquant une modification renvoie une nouvelle copie modifiée de l'objet
sans altérer l'original

C) Factory -> fabrique d'objet
le but est de ne pas avoir a connaitre les détails de fabrication
d'un type d'objet pour pouvoir l'utiliser. on va déleguer la construction
de l'objet a une classe tierce, qu'on apelle factory
	une factory peut juste nous cacher les details de fabrication
	une factory peut aussi décider quel type exact d'objet fournir
	

D) Builder (variation de factory)
de rendre plus aisé la construction d'une classe particulièrement
complexe. Si la construction d'un objet de cette classe nécéssite
beaucoup de parametres, avec potentiellement des regles à respecter
et des variantes, cela devient très laborieux de construire l'objet
traditionellement.
dans ce cas la, on peut utiliser une factory spéciale appelée builder
une classe sert a construire un objet d'une autre classe
le but n'est pas de choisir la classe, mais de bien construire
l'objet avec une syntaxe simplifiée à l'usage










